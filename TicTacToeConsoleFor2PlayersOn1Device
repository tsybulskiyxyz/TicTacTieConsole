import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        char[][] gameBoard = gameBoard();
        printGameBoard(gameBoard);
        run(gameBoard);
    }

    public static char[][] gameBoard() {
        char[][] gameBoard = new char[3][3];
        for (int row = 0; row < gameBoard.length; row++) {
            for (int col = 0; col < gameBoard.length; col++) {
                gameBoard[row][col] = ' ';
            }
        }
        return gameBoard;
    }

    public static void run (char[][] gameBoard) {
        Scanner scanner = new Scanner(System.in);
        int numberOfMoves = 0;
        System.out.println("\nX start first.");
        while (!endOfTheGame(gameBoard)) {
            System.out.println("\nSelect a cell to make a move:");
            if (!scanner.hasNextInt()) {
                System.out.println("You should enter numbers!");
                continue;
            } else {
                int numberOfRow = scanner.nextInt() - 1;
                int numberOfCol = scanner.nextInt() - 1;
                if (numberOfRow >= gameBoard.length || numberOfCol >= gameBoard.length) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    continue;
                } else if (gameBoard[numberOfRow][numberOfCol] != ' ') {
                    System.out.println("This cell is occupied! Choose another one!");
                    continue;
                } else {
                    numberOfMoves++;
                    gameBoard[numberOfRow][numberOfCol] = sigh(numberOfMoves);
                    printGameBoard(gameBoard);
                    printResult(gameBoard);
                }
            }
        }
    }

    public static void printGameBoard(char[][] gameBoard) {
        System.out.printf("""
                ---------
                | %c %c %c |
                | %c %c %c |
                | %c %c %c |
                ---------
                """.formatted(gameBoard[0][0], gameBoard[0][1], gameBoard[0][2], gameBoard[1][0],
                gameBoard[1][1], gameBoard[1][2], gameBoard[2][0], gameBoard[2][1], gameBoard[2][2]));

    }
    
     public static void printResult(char[][] gameBoard) {
        if (checkWin('X', gameBoard)) {
            System.out.println("X wins!");
        } else if (checkWin('O', gameBoard)) {
            System.out.println("O wins!");
        } else if (draw(gameBoard)){
            System.out.println("Draw!");
        }
    }

    public static boolean endOfTheGame (char[][] gameBoard) {
        boolean endOfTheGame = false;
        if (checkWin('X',gameBoard)){
            endOfTheGame = true;
        } else if (checkWin('O', gameBoard)) {
            endOfTheGame = true;
        } else if (draw(gameBoard)) {
            endOfTheGame = true;
        }
        return endOfTheGame;
    }

    public static boolean checkWin(char cell, char[][] gameBoard) {
        boolean result = false;
        for (int row = 0; row < gameBoard.length; row++) {
            for (int col = 0; col < gameBoard.length; col++) {
                if ((gameBoard[0][col] == cell && gameBoard[1][col] == cell &&
                        gameBoard[2][col] == cell) || (gameBoard[row][0] == cell &&
                        gameBoard[row][1] == cell && gameBoard[row][2] == cell)) {
                    result = true;
                }
                if ((gameBoard[0][0] == cell && gameBoard[1][1] == cell
                        && gameBoard[2][2] == cell) || (gameBoard[0][2] == cell
                        && gameBoard[1][1] == cell && gameBoard[2][0] == cell)) {
                    result = true;
                }
            }
        }
        return result;
    }
    
    public static boolean draw (char[][] gameBoard) {
        boolean draw = false;
        if (!checkWin('X', gameBoard) && !checkWin('O', gameBoard) && !gameNotFinished(gameBoard)) {
            draw = true;
        }
        return draw;
    }
    
    public static boolean gameNotFinished(char[][] gameBoard) {
        boolean gameNotFinished = false;
        for (int row = 0; row < gameBoard.length; row++) {
            for (int col = 0; col < gameBoard.length; col++) {
                if (gameBoard[row][col] == ' ') {
                    gameNotFinished = true;
                }
            }
        }
        return gameNotFinished;
    }

    public static char sigh (int numberOfMoves) {
        char sigh = ' ';
        if (numberOfMoves % 2 == 0) {
            sigh = 'O';
        } else {
            sigh = 'X';
        }
        return sigh;
    }
}
